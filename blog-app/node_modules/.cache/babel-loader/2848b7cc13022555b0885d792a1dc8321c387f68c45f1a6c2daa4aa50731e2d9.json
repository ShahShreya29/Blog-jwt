{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:8081/\" // our API base URL\n});\n\n// Request interceptor for adding the bearer token\napi.interceptors.request.use(config => {\n  const token = JSON.parse(localStorage.getItem(\"login\")).accessToken;\n  console.log(token.accessToken);\n  if (token) {\n    config.headers.Authorization = `Bearer ${token.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// // API endpoints\n// export const getUser = () => {\n//   return api.get(\"/user\");\n// };\n\n// export const deleteUser = (userId) => {\n//   return api.delete(`/user/${userId}`);\n// };\n\n// https://coderomeos.org/axios-interceptors-in-a-react-application\n\n// // Create axios instance for specific base URL\n// const axiosInstance = axios.create({\n//   baseURL: \"http://localhost:8081/api/\",\n// });\n\n// // Add request interceptor for attaching token to requests\n// axiosInstance.interceptors.request.use(\n//   (config) => {\n//     const token = JSON.parse(localStorage.getItem(\"login\"));\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token.token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// Add response interceptor for handling token expiration\n\napi.interceptors.response.use(response => {\n  console.log(\"RES\", response);\n  return response;\n}, async error => {\n  if (error.response && error.response.status === 419) {\n    console.log(\"Token expired, refreshing...\");\n    try {\n      const refreshToken = sessionStorage.getItem(\"refreshToken\");\n      if (!refreshToken) {\n        console.log(\"No refresh token provided.\");\n        throw new Error(\"No refresh token provided.\");\n      } else {\n        console.log(\"refresh token provided.\", refreshToken);\n      }\n      const refreshData = await axios.get(`http://localhost:8081/api/refreshToken`, {\n        headers: {\n          requestToken: refreshToken\n        }\n      });\n      const newToken = refreshData.data.token;\n      console.log(\"NewToken\", newToken);\n      localStorage.setItem(\"login\", JSON.stringify({\n        token: newToken\n      }));\n      console.log(\"hereeee\");\n      sessionStorage.setItem(\"refreshToken\", newToken);\n\n      // Retry the original request with the new access token\n      const originalRequest = error.config;\n      originalRequest.headers.Authorization = `Bearer ${newToken}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      console.error(\"Error\", refreshError);\n      return Promise.reject(error);\n    }\n  }\n});\nexport default api;\n\n// import axios from \"axios\";\n\n// const api = axios.create({\n//     baseURL: \"http://localhost:5001/\", // our API base URL\n//   });\n\n// // Add a request interceptor to attach the access token to each request\n// api.interceptors.request.use(\n//   (config) => {\n//     const accessToken = localStorage.getItem(\"accessToken\");\n//     if (accessToken) {\n//       config.headers.Authorization = `Bearer ${accessToken}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Add a response interceptor to handle token refreshment and authentication\n// api.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   async (error) => {\n//     const originalRequest = error.config;\n//     if (\n//       error.response.status === 419 &&  !originalRequest._retry\n//     ) {\n//       originalRequest._retry = true;\n//       try {\n\n// JSON.parse(localStorage.getItem(\"storeData\")); \n//         const refreshToken = JSON.parse(localStorage.getItem(\"login\")).refreshToken;\n//         const response = await axios.post(\"/refreshToken\", { refreshToken });\n//         const newAccessToken = response.data.accessToken;\n//         localStorage.setItem(\"accessToken\", newAccessToken);\n//         originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n//         return axios(originalRequest);\n//       } catch (error) {\n//         console.error(\"Token refresh failed:\", error);\n//         // Redirect to login page if token refresh fails\n//         // window.location.href = \"/login\";\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","JSON","parse","localStorage","getItem","accessToken","console","log","headers","Authorization","error","Promise","reject","response","status","refreshToken","sessionStorage","Error","refreshData","get","requestToken","newToken","data","setItem","stringify","originalRequest","refreshError"],"sources":["/home/shreya/Documents/jwt/blog-app/src/config.js"],"sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://localhost:8081/\", // our API base URL\n});\n\n// Request interceptor for adding the bearer token\napi.interceptors.request.use(\n  (config) => {\n    const token = JSON.parse(localStorage.getItem(\"login\")).accessToken;\n    console.log(token.accessToken);\n    if (token) {\n      config.headers.Authorization = `Bearer ${token.token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// // API endpoints\n// export const getUser = () => {\n//   return api.get(\"/user\");\n// };\n\n// export const deleteUser = (userId) => {\n//   return api.delete(`/user/${userId}`);\n// };\n\n// https://coderomeos.org/axios-interceptors-in-a-react-application\n\n// // Create axios instance for specific base URL\n// const axiosInstance = axios.create({\n//   baseURL: \"http://localhost:8081/api/\",\n// });\n\n// // Add request interceptor for attaching token to requests\n// axiosInstance.interceptors.request.use(\n//   (config) => {\n//     const token = JSON.parse(localStorage.getItem(\"login\"));\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token.token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// Add response interceptor for handling token expiration\n\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"RES\", response);\n    return response;\n  },\n  async (error) => {\n    if (error.response && error.response.status === 419) {\n      console.log(\"Token expired, refreshing...\");\n      try {\n        const refreshToken = sessionStorage.getItem(\"refreshToken\");\n        if (!refreshToken) {\n          console.log(\"No refresh token provided.\");\n          throw new Error(\"No refresh token provided.\");\n        } else {\n          console.log(\"refresh token provided.\", refreshToken);\n        }\n        const refreshData = await axios.get(\n          `http://localhost:8081/api/refreshToken`,\n          {\n            headers: {\n              requestToken: refreshToken,\n            },\n          }\n        );\n        const newToken = refreshData.data.token;\n        console.log(\"NewToken\",newToken);\n        localStorage.setItem(\n          \"login\",\n          JSON.stringify({\n            token: newToken,\n          })\n        );\nconsole.log(\"hereeee\");\n        sessionStorage.setItem(\"refreshToken\", newToken);\n\n        // Retry the original request with the new access token\n        const originalRequest = error.config;\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        console.error(\"Error\", refreshError);\n\n        return Promise.reject(error);\n      }\n    }\n  }\n);\n\nexport default api;\n\n\n// import axios from \"axios\";\n\n// const api = axios.create({\n//     baseURL: \"http://localhost:5001/\", // our API base URL\n//   });\n  \n\n// // Add a request interceptor to attach the access token to each request\n// api.interceptors.request.use(\n//   (config) => {\n//     const accessToken = localStorage.getItem(\"accessToken\");\n//     if (accessToken) {\n//       config.headers.Authorization = `Bearer ${accessToken}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // Add a response interceptor to handle token refreshment and authentication\n// api.interceptors.response.use(\n//   (response) => {\n//     return response;\n//   },\n//   async (error) => {\n//     const originalRequest = error.config;\n//     if (\n//       error.response.status === 419 &&  !originalRequest._retry\n//     ) {\n//       originalRequest._retry = true;\n//       try {\n\n// JSON.parse(localStorage.getItem(\"storeData\")); \n//         const refreshToken = JSON.parse(localStorage.getItem(\"login\")).refreshToken;\n//         const response = await axios.post(\"/refreshToken\", { refreshToken });\n//         const newAccessToken = response.data.accessToken;\n//         localStorage.setItem(\"accessToken\", newAccessToken);\n//         originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n//         return axios(originalRequest);\n//       } catch (error) {\n//         console.error(\"Token refresh failed:\", error);\n//         // Redirect to login page if token refresh fails\n//         // window.location.href = \"/login\";\n//       }\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n\n// export default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}