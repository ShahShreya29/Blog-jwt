{"ast":null,"code":"// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://localhost:8081/\", // our API base URL\n// });\n\n// // Request interceptor for adding the bearer token\n// api.interceptors.request.use(\n//   (config) => {\n//     const token = JSON.parse(localStorage.getItem(\"login\"));\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token.token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // API endpoints\n// export const getUser = () => {\n//   return api.get(\"/user\");\n// };\n\n// export const deleteUser = (userId) => {\n//   return api.delete(`/user/${userId}`);\n// };\n\n// // Export the api instance\n// export default api;\n\n// // https://coderomeos.org/axios-interceptors-in-a-react-application\n\n// // // Create axios instance for specific base URL\n// // const axiosInstance = axios.create({\n// //   baseURL: \"http://localhost:8081/api/\",\n// // });\n\n// // // Add request interceptor for attaching token to requests\n// // axiosInstance.interceptors.request.use(\n// //   (config) => {\n// //     const token = JSON.parse(localStorage.getItem(\"login\"));\n// //     if (token) {\n// //       config.headers.Authorization = `Bearer ${token.token}`;\n// //     }\n// //     return config;\n// //   },\n// //   (error) => {\n// //     return Promise.reject(error);\n// //   }\n// // );\n\n// // Add response interceptor for handling token expiration\n\n// api.interceptors.response.use(\n//   (response) => {\n//     console.log(\"RES\", response);\n//     return response;\n//   },\n//   async (error) => {\n//     if (error.response && error.response.status === 419) {\n//       console.log(\"Token expired, refreshing...\");\n//       try {\n//         const refreshToken = JSON.parse(\n//           localStorage.getItem(\"login\")\n//         ).refreshToken;\n//         if (!refreshToken) {\n//           console.log(\"No refresh token provided.\");\n//           throw new Error(\"No refresh token provided.\");\n//         } else {\n//           console.log(\"refresh token provided.\", refreshToken);\n//         }\n//         const refreshData = await axios.get(\n//           `http://localhost:8081/api/refreshToken`,\n//           {\n//             headers: {\n//               requestToken: refreshToken,\n//             },\n//           }\n//         );\n//         const newToken = refreshData.data.token;\n//         localStorage.setItem(\n//           \"login\",\n//           JSON.stringify({\n//             token: newToken,\n//           })\n//         );\n\n//         // Retry the original request with the new access token\n//         const originalRequest = error.config;\n//         originalRequest.headers.Authorization = `Bearer ${newToken}`;\n//         return api(originalRequest);\n//       } catch (refreshError) {\n//         console.error(\"Error\", refreshError);\n\n//           return Promise.reject(error);\n//       }\n//     }\n//   }\n// );\n\n// React - Axios Interceptor\nimport axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:8081/\" // API base URL\n});\n\n// Request interceptor for adding the bearer token\napi.interceptors.request.use(config => {\n  const token = JSON.parse(sessionStorage.getItem(\"login\"));\n  if (token) {\n    config.headers.Authorization = `Bearer ${token.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor for handling token expiration\napi.interceptors.response.use(response => {\n  console.log(\"RES\", response);\n  return response;\n}, async error => {\n  if (error.response && error.response.status === 419) {\n    console.log(\"Token expired, refreshing...\");\n    try {\n      const refreshToken = JSON.parse(sessionStorage.getItem(\"login\"));\n      if (!refreshToken) {\n        console.log(\"No refresh token provided.\");\n        throw new Error(\"No refresh token provided.\");\n      }\n      const refreshData = await axios.get(`http://localhost:8081/api/refreshToken`, {\n        headers: {\n          \"refresh-token\": refreshToken\n        }\n      });\n      const newToken = refreshData.data.accessToken;\n      sessionStorage.setItem(\"login\", JSON.stringify({\n        token: newToken,\n        refreshToken: refreshToken\n      }));\n\n      // Retry the original request with the new access token\n      const originalRequest = error.config;\n      originalRequest.headers.Authorization = `Bearer ${newToken}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      console.error(\"Error\", refreshError);\n      return Promise.reject(error);\n    }\n  }\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","token","JSON","parse","sessionStorage","getItem","headers","Authorization","error","Promise","reject","response","console","log","status","refreshToken","Error","refreshData","get","newToken","data","accessToken","setItem","stringify","originalRequest","refreshError"],"sources":["/home/shreya/Documents/jwt/blog-app/src/config.js"],"sourcesContent":["// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://localhost:8081/\", // our API base URL\n// });\n\n// // Request interceptor for adding the bearer token\n// api.interceptors.request.use(\n//   (config) => {\n//     const token = JSON.parse(localStorage.getItem(\"login\"));\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token.token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // API endpoints\n// export const getUser = () => {\n//   return api.get(\"/user\");\n// };\n\n// export const deleteUser = (userId) => {\n//   return api.delete(`/user/${userId}`);\n// };\n\n// // Export the api instance\n// export default api;\n\n// // https://coderomeos.org/axios-interceptors-in-a-react-application\n\n// // // Create axios instance for specific base URL\n// // const axiosInstance = axios.create({\n// //   baseURL: \"http://localhost:8081/api/\",\n// // });\n\n// // // Add request interceptor for attaching token to requests\n// // axiosInstance.interceptors.request.use(\n// //   (config) => {\n// //     const token = JSON.parse(localStorage.getItem(\"login\"));\n// //     if (token) {\n// //       config.headers.Authorization = `Bearer ${token.token}`;\n// //     }\n// //     return config;\n// //   },\n// //   (error) => {\n// //     return Promise.reject(error);\n// //   }\n// // );\n\n// // Add response interceptor for handling token expiration\n\n// api.interceptors.response.use(\n//   (response) => {\n//     console.log(\"RES\", response);\n//     return response;\n//   },\n//   async (error) => {\n//     if (error.response && error.response.status === 419) {\n//       console.log(\"Token expired, refreshing...\");\n//       try {\n//         const refreshToken = JSON.parse(\n//           localStorage.getItem(\"login\")\n//         ).refreshToken;\n//         if (!refreshToken) {\n//           console.log(\"No refresh token provided.\");\n//           throw new Error(\"No refresh token provided.\");\n//         } else {\n//           console.log(\"refresh token provided.\", refreshToken);\n//         }\n//         const refreshData = await axios.get(\n//           `http://localhost:8081/api/refreshToken`,\n//           {\n//             headers: {\n//               requestToken: refreshToken,\n//             },\n//           }\n//         );\n//         const newToken = refreshData.data.token;\n//         localStorage.setItem(\n//           \"login\",\n//           JSON.stringify({\n//             token: newToken,\n//           })\n//         );\n\n//         // Retry the original request with the new access token\n//         const originalRequest = error.config;\n//         originalRequest.headers.Authorization = `Bearer ${newToken}`;\n//         return api(originalRequest);\n//       } catch (refreshError) {\n//         console.error(\"Error\", refreshError);\n\n//           return Promise.reject(error);\n//       }\n//     }\n//   }\n// );\n\n// React - Axios Interceptor\nimport axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://localhost:8081/\", // API base URL\n});\n\n// Request interceptor for adding the bearer token\napi.interceptors.request.use(\n  (config) => {\n    const token = JSON.parse(sessionStorage.getItem(\"login\"));\n    if (token) {\n      config.headers.Authorization = `Bearer ${token.token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for handling token expiration\napi.interceptors.response.use(\n  (response) => {\n    console.log(\"RES\", response);\n    return response;\n  },\n  async (error) => {\n    if (error.response && error.response.status === 419) {\n      console.log(\"Token expired, refreshing...\");\n      try {\n        const refreshToken = JSON.parse(sessionStorage.getItem(\"login\"));\n        if (!refreshToken) {\n          console.log(\"No refresh token provided.\");\n          throw new Error(\"No refresh token provided.\");\n        }\n        const refreshData = await axios.get(\n          `http://localhost:8081/api/refreshToken`,\n          {\n            headers: {\n              \"refresh-token\": refreshToken,\n            },\n          }\n        );\n        const newToken = refreshData.data.accessToken;\n        sessionStorage.setItem(\n          \"login\",\n          JSON.stringify({\n            token: newToken,\n            refreshToken: refreshToken,\n          })\n        );\n\n        // Retry the original request with the new access token\n        const originalRequest = error.config;\n        originalRequest.headers.Authorization = `Bearer ${newToken}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        console.error(\"Error\", refreshError);\n        return Promise.reject(error);\n      }\n    }\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,wBAAwB,CAAE;AACrC,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACzD,IAAIJ,KAAK,EAAE;IACTD,MAAM,CAACM,OAAO,CAACC,aAAa,GAAI,UAASN,KAAK,CAACA,KAAM,EAAC;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACG,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,IAAK;EACZC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEF,QAAQ,CAAC;EAC5B,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EACf,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;IACnDF,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,IAAI;MACF,MAAME,YAAY,GAAGb,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;MAChE,IAAI,CAACU,YAAY,EAAE;QACjBH,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzC,MAAM,IAAIG,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MACA,MAAMC,WAAW,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CAChC,wCAAuC,EACxC;QACEZ,OAAO,EAAE;UACP,eAAe,EAAES;QACnB;MACF,CACF,CAAC;MACD,MAAMI,QAAQ,GAAGF,WAAW,CAACG,IAAI,CAACC,WAAW;MAC7CjB,cAAc,CAACkB,OAAO,CACpB,OAAO,EACPpB,IAAI,CAACqB,SAAS,CAAC;QACbtB,KAAK,EAAEkB,QAAQ;QACfJ,YAAY,EAAEA;MAChB,CAAC,CACH,CAAC;;MAED;MACA,MAAMS,eAAe,GAAGhB,KAAK,CAACR,MAAM;MACpCwB,eAAe,CAAClB,OAAO,CAACC,aAAa,GAAI,UAASY,QAAS,EAAC;MAC5D,OAAOzB,GAAG,CAAC8B,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOC,YAAY,EAAE;MACrBb,OAAO,CAACJ,KAAK,CAAC,OAAO,EAAEiB,YAAY,CAAC;MACpC,OAAOhB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B;EACF;AACF,CACF,CAAC;AAED,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}