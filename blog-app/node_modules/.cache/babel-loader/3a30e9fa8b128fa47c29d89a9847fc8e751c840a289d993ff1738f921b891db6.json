{"ast":null,"code":"var _jsxFileName = \"/home/shreya/Documents/react/blog-app/src/Components/SignupForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TextField from \"./TextField\";\nimport AddBtn from \"./AddBtn\";\nimport { useNavigate } from \"react-router-dom\";\nimport SelectField from \"./SelectField\";\n// import { signUP } from \"../AuthReducer\";\n// import { useDispatch } from \"react-redux\";\nimport { Formik, Form } from \"formik\";\nimport * as yup from 'yup';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SignupForm = () => {\n  _s();\n  const validate = yup.object({\n    name: yup.string().required('Name Is Required').max(10, 'Must be 10 or less letters '),\n    email: yup.string().email('invalid email').required('email is required'),\n    password: yup.string().required('Password is Required').min(6, 'At Least 6 Character')\n    //confirmPassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match'),\n  });\n  const navigate = useNavigate();\n  const [values, setValues] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"\"\n  });\n  const options = [{\n    value: \"user\",\n    label: \"User\"\n  }, {\n    value: \"admin\",\n    label: \"Admin\"\n  }];\n  const handleSignup = e => {\n    e.preventDefault();\n    if (!values.name || !values.email || !values.password || !values.role) {\n      alert(\"Please fill in all fields\");\n      return;\n    }\n    alert(\"Sign up successful!\");\n    navigate(\"/LoginForm\");\n    var users = JSON.parse(localStorage.getItem(\"users\")) || [];\n    users.push({\n      name: values.name,\n      email: values.email,\n      password: btoa(values.password),\n      role: values.role\n    });\n\n    // Store the updated array back into localStorage\n    localStorage.setItem(\"users\", JSON.stringify(users));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        role: \"\"\n      },\n      validationSchema: validate,\n      children: Formik => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"SignUp \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Name: \",\n              type: \"text\",\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Email: \",\n              type: \"email\",\n              name: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              label: \"Password: \",\n              type: \"password\",\n              name: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: /*#__PURE__*/_jsxDEV(SelectField, {\n              label: options.label,\n              options: options,\n              value: values.role,\n              onChange: e => setValues({\n                ...values,\n                role: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(AddBtn, {\n              style: {\n                marginLeft: \"64px\",\n                marginTop: \"20px\",\n                backgroundColor: \"#1070ef\",\n                color: \"white\",\n                width: \"99px\"\n              },\n              onClick: handleSignup,\n              children: [\" \", \"SignUP\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(SignupForm, \"JlgCfs7LGVKtLVB1z1t6Z6dLbtw=\", false, function () {\n  return [useNavigate];\n});\n_c = SignupForm;\nexport default SignupForm;\nvar _c;\n$RefreshReg$(_c, \"SignupForm\");","map":{"version":3,"names":["React","useState","TextField","AddBtn","useNavigate","SelectField","Formik","Form","yup","jsxDEV","_jsxDEV","Fragment","_Fragment","SignupForm","_s","validate","object","name","string","required","max","email","password","min","navigate","values","setValues","role","options","value","label","handleSignup","e","preventDefault","alert","users","JSON","parse","localStorage","getItem","push","btoa","setItem","stringify","children","initialValues","validationSchema","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onChange","target","style","marginLeft","marginTop","backgroundColor","color","width","onClick","_c","$RefreshReg$"],"sources":["/home/shreya/Documents/react/blog-app/src/Components/SignupForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport TextField from \"./TextField\";\nimport AddBtn from \"./AddBtn\"; \nimport { useNavigate } from \"react-router-dom\";\nimport SelectField from \"./SelectField\";\n// import { signUP } from \"../AuthReducer\";\n// import { useDispatch } from \"react-redux\";\nimport { Formik, Form } from \"formik\";\nimport * as yup from 'yup'\n\nconst SignupForm = () => {\n\n  const validate = yup.object({\n    name: yup.string().required('Name Is Required').max(10,'Must be 10 or less letters '),\n    email: yup.string().email('invalid email').required('email is required'),\n    password: yup.string().required('Password is Required').min(6,'At Least 6 Character'),\n    //confirmPassword: yup.string().oneOf([yup.ref('password'), null], 'Passwords must match'),\n  });\n  const navigate = useNavigate();\n\n  const [values, setValues] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"\",\n  });\n\n  const options = [\n    { value: \"user\", label: \"User\" },\n    { value: \"admin\", label: \"Admin\" },\n  ];\n\n  const handleSignup = (e) => {\n    e.preventDefault();\n    if (!values.name || !values.email || !values.password || !values.role) {\n      alert(\"Please fill in all fields\");\n      return;\n    }\n    alert(\"Sign up successful!\");\n\n    navigate(\"/LoginForm\");\n    var users = JSON.parse(localStorage.getItem(\"users\")) || [];\n    users.push({\n      name: values.name,\n      email: values.email,\n      password: btoa(values.password),\n      role: values.role,\n    });\n\n    // Store the updated array back into localStorage\n    localStorage.setItem(\"users\", JSON.stringify(users));\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          name: \"\",\n          email: \"\",\n          password: \"\",\n          role: \"\",\n        }}\n        validationSchema={validate}\n      >\n        {(Formik) => (\n          <div>\n            <h1>SignUp </h1>\n            <Form>\n              <div className=\"mb-3\">\n                <TextField\n                  label=\"Name: \"\n                  type= \"text\"\n                  name=\"name\"\n                 />\n                <TextField\n                  label=\"Email: \"\n                  type= \"email\"\n                  name=\"email\"\n                />\n              </div>\n              <div className=\"mb-3\">\n                <TextField\n                  label=\"Password: \"\n                    type= \"password\"\n                    name=\"password\"\n                />\n              </div>\n              <div className=\"mb-3\">\n                <SelectField\n                  label={options.label}\n                  options={options}\n                  value={values.role}\n                  onChange={(e) =>\n                    setValues({ ...values, role: e.target.value })\n                  }\n                />\n              </div>\n              <div>\n                <AddBtn\n                  style={{\n                    marginLeft: \"64px\",\n                    marginTop: \"20px\",\n                    backgroundColor: \"#1070ef\",\n                    color: \"white\",\n                    width: \"99px\",\n                  }}\n                  onClick={handleSignup}\n                >\n                  {\" \"}\n                  SignUP\n                </AddBtn>\n              </div>\n            </Form>\n          </div>\n        )}\n      </Formik>\n\n      {/* <form style={{ marginLeft: \"554px\", marginTop: \"40px\", width: \"240px\" }}>\n        <h1>SignUp</h1>\n        <div className=\"mb-3\">\n          <TextField\n            label=\"Name: \"\n            value={values.name}\n            onChange={(e) => setValues({ ...values, name: e.target.value })}\n            inputs={{\n              type: \"text\",\n              required: true,\n              pattern: \"^[A-Za-z]{3,16}$\",\n            }}\n            errorMessage=\"Name have at-least 2 to 10 character and do not use any special character in name\"\n          />\n          <TextField\n            label=\"Email: \"\n            value={values.email}\n            onChange={(e) => setValues({ ...values, email: e.target.value })}\n            inputs={{\n              type: \"text\",\n              required: true,\n              pattern: \"^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$\",\n            }}\n            errorMessage=\"Enter valid email\"\n            required={true}\n          />\n        </div>\n        <div className=\"mb-3\">\n          <TextField\n            label=\"Password: \"\n            value={values.password}\n            onChange={(e) => setValues({ ...values, password: e.target.value })}\n            inputs={{\n              type: \"password\",\n              required: true,\n              pattern:\n                \"/^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*_)(?!.*W)(?!.* ).{8,16}$/\",\n            }}\n            errorMessage=\"Password must contain digits,lowercase and uppercase letter, one underscore but no other special character and space and it must be 8-16 characters long\"\n          />\n        </div>\n        <div className=\"mb-3\">\n          <SelectField\n            label={options.label}\n            options={options}\n            value={values.role}\n            onChange={(e) => setValues({ ...values, role: e.target.value })}\n          />\n        </div>\n        <div>\n          <AddBtn\n            style={{\n              marginLeft: \"64px\",\n              marginTop: \"20px\",\n              backgroundColor: \"#1070ef\",\n              color: \"white\",\n              width: \"99px\",\n            }}\n            onClick={handleSignup}\n          >\n            {\" \"}\n            SignUP\n          </AddBtn>\n        </div>\n      </form> */}\n    </>\n  );\n};\n\nexport default SignupForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}