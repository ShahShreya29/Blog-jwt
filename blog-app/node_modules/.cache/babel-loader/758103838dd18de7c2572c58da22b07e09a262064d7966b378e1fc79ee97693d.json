{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [];\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    signUP: (state, action) => {\n      const newUSer = {\n        ...action.payload,\n        ...state\n      };\n      state.push(newUSer);\n    }\n  }\n});\nexport const {\n  signUP,\n  logIn\n} = userSlice.actions;\nexport default userSlice.reducer;\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n\n// let data = JSON.parse(localStorage.getItem(\"blogs\"));\n// if (localStorage.getItem(\"blogs\") !== null) {\n//   console.log(\"Item does not exist in localstoarge\");\n//   var initialState = data;\n// } else {\n//   console.log(\"Item exists in localstorage\");\n// }\n\n// // const initialState = [\n\n// // ];\n\n// const blogSlice = createSlice({\n//   name: \"blogs\",\n//   initialState,\n//   reducers: {\n//     addBlog: (state, action) => {\n//       const newBlog = {\n//         id: state.length + 1,\n//         ...action.payload,\n//       };\n//       const allBlogs = [...state, newBlog];\n//       localStorage.setItem(\"blogs\", JSON.stringify(allBlogs));\n//       return allBlogs;\n//     },\n//     deleteBlog: (state, action) => {\n//       const id = action.payload;\n//       let blogs = JSON.parse(localStorage.getItem(\"blogs\"));\n//       blogs = blogs.filter((blog) => blog.id !== +id);\n//       localStorage.setItem(\"blogs\", JSON.stringify(blogs));\n//       return blogs;\n//     },\n\n//     // editBlog: (state, action) => {\n//     //   const { id, ...updatedBlogData } = action.payload;\n//     //   const blogIndex = state.findIndex((blog) => blog.id === id);\n//     //   if (blogIndex !== -1) {\n//     //     state[blogIndex] = { ...state[blogIndex], ...updatedBlogData };\n\n//     //   }\n//     // },\n//     editBlog: (state, action) => {\n//       const { id, ...updatedBlogData } = action.payload;\n//       const blogIndex = state.findIndex((blog) => blog.id === id);\n//       if (blogIndex !== -1) {\n//         state[blogIndex] = { ...state[blogIndex], ...updatedBlogData };\n//         localStorage.setItem(\"blogs\", JSON.stringify(state));\n//       }\n//     },\n//   },\n// });\n\n// export const { addBlog, deleteBlog, editBlog } = blogSlice.actions;\n// export default blogSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","userSlice","name","reducers","signUP","state","action","newUSer","payload","push","logIn","actions","reducer"],"sources":["/home/shreya/Documents/react/blog-app/src/AuthReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [];\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    signUP: (state, action) => {\n        const newUSer = {\n            ...action.payload,\n            ...state\n           \n          };\n          state.push(newUSer);\n    }\n  },\n});\n\nexport const { signUP , logIn } = userSlice.actions;\nexport default userSlice.reducer;\n\n\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n\n// let data = JSON.parse(localStorage.getItem(\"blogs\"));\n// if (localStorage.getItem(\"blogs\") !== null) {\n//   console.log(\"Item does not exist in localstoarge\");\n//   var initialState = data;\n// } else {\n//   console.log(\"Item exists in localstorage\");\n// }\n\n// // const initialState = [\n\n// // ];\n\n// const blogSlice = createSlice({\n//   name: \"blogs\",\n//   initialState,\n//   reducers: {\n//     addBlog: (state, action) => {\n//       const newBlog = {\n//         id: state.length + 1,\n//         ...action.payload,\n//       };\n//       const allBlogs = [...state, newBlog];\n//       localStorage.setItem(\"blogs\", JSON.stringify(allBlogs));\n//       return allBlogs;\n//     },\n//     deleteBlog: (state, action) => {\n//       const id = action.payload;\n//       let blogs = JSON.parse(localStorage.getItem(\"blogs\"));\n//       blogs = blogs.filter((blog) => blog.id !== +id);\n//       localStorage.setItem(\"blogs\", JSON.stringify(blogs));\n//       return blogs;\n//     },\n\n//     // editBlog: (state, action) => {\n//     //   const { id, ...updatedBlogData } = action.payload;\n//     //   const blogIndex = state.findIndex((blog) => blog.id === id);\n//     //   if (blogIndex !== -1) {\n//     //     state[blogIndex] = { ...state[blogIndex], ...updatedBlogData };\n\n//     //   }\n//     // },\n//     editBlog: (state, action) => {\n//       const { id, ...updatedBlogData } = action.payload;\n//       const blogIndex = state.findIndex((blog) => blog.id === id);\n//       if (blogIndex !== -1) {\n//         state[blogIndex] = { ...state[blogIndex], ...updatedBlogData };\n//         localStorage.setItem(\"blogs\", JSON.stringify(state));\n//       }\n//     },\n//   },\n// });\n\n// export const { addBlog, deleteBlog, editBlog } = blogSlice.actions;\n// export default blogSlice.reducer;\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG,EAAE;AAEvB,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC5BG,IAAI,EAAE,MAAM;EACZF,YAAY;EACZG,QAAQ,EAAE;IACRC,MAAM,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACvB,MAAMC,OAAO,GAAG;QACZ,GAAGD,MAAM,CAACE,OAAO;QACjB,GAAGH;MAEL,CAAC;MACDA,KAAK,CAACI,IAAI,CAACF,OAAO,CAAC;IACzB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,MAAM;EAAGM;AAAM,CAAC,GAAGT,SAAS,CAACU,OAAO;AACnD,eAAeV,SAAS,CAACW,OAAO;;AAIhC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}