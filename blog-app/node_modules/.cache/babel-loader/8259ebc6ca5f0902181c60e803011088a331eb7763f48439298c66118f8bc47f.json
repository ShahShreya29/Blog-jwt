{"ast":null,"code":"// Import axios\nimport axios from \"axios\";\n\n// Create an instance of axios\nconst api = axios.create({\n  baseURL: \"http://localhost:5001/\" // Our API base URL\n});\n\n// Add a request interceptor to attach the access token to each request\napi.interceptors.request.use(config => {\n  const accessToken = JSON.parse(localStorage.getItem(\"login\")).accessToken;\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle token refreshment and authentication\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n  if (error.response && error.response.status === 419) {\n    try {\n      const refreshToken = JSON.parse(localStorage.getItem(\"login\")).refreshToken;\n      const setRefreshToken = await axios.post(\"http://localhost:5001/api/users/refreshToken\", {}, {\n        headers: {\n          \"refresh-token\": refreshToken\n        }\n      });\n      const newAccessToken = setRefreshToken.data.accessToken;\n\n      // Update the access token in localStorage\n      const loginData = JSON.parse(localStorage.getItem(\"login\"));\n      loginData.accessToken = newAccessToken;\n      localStorage.setItem(\"login\", JSON.stringify(loginData));\n\n      // Retry the original request with the new access token\n      originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n      return axios(originalRequest);\n    } catch (error) {\n      window.location.href = '/loginForm';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Export the axios instance\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","accessToken","JSON","parse","localStorage","getItem","headers","Authorization","error","Promise","reject","response","originalRequest","status","refreshToken","setRefreshToken","post","newAccessToken","data","loginData","setItem","stringify","window","location","href"],"sources":["/home/shreya/Documents/jwt/blog-app/src/Config/AxiosInterCeptor.js"],"sourcesContent":["// Import axios\nimport axios from \"axios\";\n\n\n// Create an instance of axios\nconst api = axios.create({\n  baseURL: \"http://localhost:5001/\", // Our API base URL\n});\n\n// Add a request interceptor to attach the access token to each request\napi.interceptors.request.use(\n  (config) => {\n    const accessToken = JSON.parse(localStorage.getItem(\"login\")).accessToken;\n    if (accessToken) {\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle token refreshment and authentication\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response && error.response.status === 419) {\n      try {\n        const refreshToken = JSON.parse(localStorage.getItem(\"login\")).refreshToken;\n        const setRefreshToken = await axios.post(\n          \"http://localhost:5001/api/users/refreshToken\",\n          {},\n          {\n            headers: {\n              \"refresh-token\": refreshToken,\n            },\n          }\n        );\n        const newAccessToken = setRefreshToken.data.accessToken;\n\n        // Update the access token in localStorage\n        const loginData = JSON.parse(localStorage.getItem(\"login\"));\n        loginData.accessToken = newAccessToken;\n        localStorage.setItem(\"login\", JSON.stringify(loginData));\n      \n\n        // Retry the original request with the new access token\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        return axios(originalRequest);\n      } catch (error) {\n        window.location.href = '/loginForm';\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n// Export the axios instance\nexport default api;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAGzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,wBAAwB,CAAE;AACrC,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAACJ,WAAW;EACzE,IAAIA,WAAW,EAAE;IACfD,MAAM,CAACM,OAAO,CAACC,aAAa,GAAI,UAASN,WAAY,EAAC;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACG,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACR,MAAM;EAEpC,IAAIQ,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IACnD,IAAI;MACF,MAAMC,YAAY,GAAGZ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAACS,YAAY;MAC3E,MAAMC,eAAe,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CACtC,8CAA8C,EAC9C,CAAC,CAAC,EACF;QACEV,OAAO,EAAE;UACP,eAAe,EAAEQ;QACnB;MACF,CACF,CAAC;MACD,MAAMG,cAAc,GAAGF,eAAe,CAACG,IAAI,CAACjB,WAAW;;MAEvD;MACA,MAAMkB,SAAS,GAAGjB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;MAC3Dc,SAAS,CAAClB,WAAW,GAAGgB,cAAc;MACtCb,YAAY,CAACgB,OAAO,CAAC,OAAO,EAAElB,IAAI,CAACmB,SAAS,CAACF,SAAS,CAAC,CAAC;;MAGxD;MACAP,eAAe,CAACN,OAAO,CAACC,aAAa,GAAI,UAASU,cAAe,EAAC;MAClE,OAAOxB,KAAK,CAACmB,eAAe,CAAC;IAC/B,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdc,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,YAAY;IACrC;EACF;EAEA,OAAOf,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}