{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = [{\n  isAuthenticated: false,\n  user: null\n}];\nconst userSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    signUP: (state, action) => {\n      // state.isAuthenticated = true;\n      // state.user = action.payload;\n      var users = JSON.parse(localStorage.getItem(\"users\")) || [];\n      console.log(users);\n      const existingUser = users.find(user => user.email === e.email);\n      if (existingUser) {\n        alert(\"User Already Exists\");\n      } else {\n        alert('Sigh UP SuccessFully ');\n        navigate(\"/LoginForm\");\n        users.push({\n          name: e.name,\n          email: e.email,\n          password: btoa(e.password),\n          role: values.options\n        });\n        localStorage.setItem(\"users\", JSON.stringify(users));\n      }\n    },\n    logIn: (state, action) => {\n      state.isAuthenticated = true;\n      state.user = action.payload;\n    }\n  }\n});\nexport const {\n  signUP,\n  logIn\n} = userSlice.actions;\nexport default userSlice.reducer;\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n\n// let data = JSON.parse(localStorage.getItem(\"blogs\"));\n// if (localStorage.getItem(\"blogs\") !== null) {\n//   console.log(\"Item does not exist in localstoarge\");\n//   var initialState = data;\n// } else {\n//   console.log(\"Item exists in localstorage\");\n// }\n\n// // const initialState = [\n\n// // ];\n\n// const blogSlice = createSlice({\n//   name: \"blogs\",\n//   initialState,\n//   reducers: {\n//     addBlog: (state, action) => {\n//       const newBlog = {\n//         id: state.length + 1,\n//         ...action.payload,\n//       };\n//       const allBlogs = [...state, newBlog];\n//       localStorage.setItem(\"blogs\", JSON.stringify(allBlogs));\n//       return allBlogs;\n//     },\n//     deleteBlog: (state, action) => {\n//       const id = action.payload;\n//       let blogs = JSON.parse(localStorage.getItem(\"blogs\"));\n//       blogs = blogs.filter((blog) => blog.id !== +id);\n//       localStorage.setItem(\"blogs\", JSON.stringify(blogs));\n//       return blogs;\n//     },\n\n//     // editBlog: (state, action) => {\n//     //   const { id, ...updatedBlogData } = action.payload;\n//     //   const blogIndex = state.findIndex((blog) => blog.id === id);\n//     //   if (blogIndex !== -1) {\n//     //     state[blogIndex] = { ...state[blogIndex], ...updatedBlogData };\n\n//     //   }\n//     // },\n//     editBlog: (state, action) => {\n//       const { id, ...updatedBlogData } = action.payload;\n//       const blogIndex = state.findIndex((blog) => blog.id === id);\n//       if (blogIndex !== -1) {\n//         state[blogIndex] = { ...state[blogIndex], ...updatedBlogData };\n//         localStorage.setItem(\"blogs\", JSON.stringify(state));\n//       }\n//     },\n//   },\n// });\n\n// export const { addBlog, deleteBlog, editBlog } = blogSlice.actions;\n// export default blogSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","isAuthenticated","user","userSlice","name","reducers","signUP","state","action","users","JSON","parse","localStorage","getItem","console","log","existingUser","find","email","e","alert","navigate","push","password","btoa","role","values","options","setItem","stringify","logIn","payload","actions","reducer"],"sources":["/home/shreya/Documents/react/blog-app/src/AuthReducer.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = [{\n  isAuthenticated : false,\n  user: null\n}];\n\nconst userSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    signUP: (state, action) => {\n      // state.isAuthenticated = true;\n      // state.user = action.payload;\n    var users = JSON.parse(localStorage.getItem(\"users\")) || [];\n    console.log(users);\n   const existingUser = users.find((user) => user.email === e.email);\n    if (existingUser) {\n      alert(\"User Already Exists\");\n    } else {\n      alert('Sigh UP SuccessFully ')\n      navigate(\"/LoginForm\");\n      users.push({\n        name: e.name,\n        email: e.email,\n        password: btoa(e.password),\n        role: values.options,\n      });\n      localStorage.setItem(\"users\", JSON.stringify(users));\n    }\n    },\n    logIn: (state, action) => {\n      state.isAuthenticated = true;\n      state.user = action.payload;\n     }\n  }\n})\n\nexport const { signUP, logIn } = userSlice.actions;\nexport default userSlice.reducer;\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n\n// let data = JSON.parse(localStorage.getItem(\"blogs\"));\n// if (localStorage.getItem(\"blogs\") !== null) {\n//   console.log(\"Item does not exist in localstoarge\");\n//   var initialState = data;\n// } else {\n//   console.log(\"Item exists in localstorage\");\n// }\n\n// // const initialState = [\n\n// // ];\n\n// const blogSlice = createSlice({\n//   name: \"blogs\",\n//   initialState,\n//   reducers: {\n//     addBlog: (state, action) => {\n//       const newBlog = {\n//         id: state.length + 1,\n//         ...action.payload,\n//       };\n//       const allBlogs = [...state, newBlog];\n//       localStorage.setItem(\"blogs\", JSON.stringify(allBlogs));\n//       return allBlogs;\n//     },\n//     deleteBlog: (state, action) => {\n//       const id = action.payload;\n//       let blogs = JSON.parse(localStorage.getItem(\"blogs\"));\n//       blogs = blogs.filter((blog) => blog.id !== +id);\n//       localStorage.setItem(\"blogs\", JSON.stringify(blogs));\n//       return blogs;\n//     },\n\n//     // editBlog: (state, action) => {\n//     //   const { id, ...updatedBlogData } = action.payload;\n//     //   const blogIndex = state.findIndex((blog) => blog.id === id);\n//     //   if (blogIndex !== -1) {\n//     //     state[blogIndex] = { ...state[blogIndex], ...updatedBlogData };\n\n//     //   }\n//     // },\n//     editBlog: (state, action) => {\n//       const { id, ...updatedBlogData } = action.payload;\n//       const blogIndex = state.findIndex((blog) => blog.id === id);\n//       if (blogIndex !== -1) {\n//         state[blogIndex] = { ...state[blogIndex], ...updatedBlogData };\n//         localStorage.setItem(\"blogs\", JSON.stringify(state));\n//       }\n//     },\n//   },\n// });\n\n// export const { addBlog, deleteBlog, editBlog } = blogSlice.actions;\n// export default blogSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG,CAAC;EACpBC,eAAe,EAAG,KAAK;EACvBC,IAAI,EAAE;AACR,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE;IACRC,MAAM,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACzB;MACA;MACF,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE;MAC3DC,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;MACnB,MAAMO,YAAY,GAAGP,KAAK,CAACQ,IAAI,CAAEf,IAAI,IAAKA,IAAI,CAACgB,KAAK,KAAKC,CAAC,CAACD,KAAK,CAAC;MAChE,IAAIF,YAAY,EAAE;QAChBI,KAAK,CAAC,qBAAqB,CAAC;MAC9B,CAAC,MAAM;QACLA,KAAK,CAAC,uBAAuB,CAAC;QAC9BC,QAAQ,CAAC,YAAY,CAAC;QACtBZ,KAAK,CAACa,IAAI,CAAC;UACTlB,IAAI,EAAEe,CAAC,CAACf,IAAI;UACZc,KAAK,EAAEC,CAAC,CAACD,KAAK;UACdK,QAAQ,EAAEC,IAAI,CAACL,CAAC,CAACI,QAAQ,CAAC;UAC1BE,IAAI,EAAEC,MAAM,CAACC;QACf,CAAC,CAAC;QACFf,YAAY,CAACgB,OAAO,CAAC,OAAO,EAAElB,IAAI,CAACmB,SAAS,CAACpB,KAAK,CAAC,CAAC;MACtD;IACA,CAAC;IACDqB,KAAK,EAAEA,CAACvB,KAAK,EAAEC,MAAM,KAAK;MACxBD,KAAK,CAACN,eAAe,GAAG,IAAI;MAC5BM,KAAK,CAACL,IAAI,GAAGM,MAAM,CAACuB,OAAO;IAC5B;EACH;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEzB,MAAM;EAAEwB;AAAM,CAAC,GAAG3B,SAAS,CAAC6B,OAAO;AAClD,eAAe7B,SAAS,CAAC8B,OAAO;;AAEhC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}