{"ast":null,"code":"// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://localhost:8081/\", // our API base URL\n// });\n\n// // Request interceptor for adding the bearer token\n// api.interceptors.request.use(\n//   (config) => {\n//     const token = JSON.parse(localStorage.getItem(\"login\")).accessToken;\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // // API endpoints\n// // export const getUser = () => {\n// //   return api.get(\"/user\");\n// // };\n\n// // export const deleteUser = (userId) => {\n// //   return api.delete(`/user/${userId}`);\n// // };\n\n// // https://coderomeos.org/axios-interceptors-in-a-react-application\n\n// // // Create axios instance for specific base URL\n// // const axiosInstance = axios.create({\n// //   baseURL: \"http://localhost:8081/api/\",\n// // });\n\n// // // Add request interceptor for attaching token to requests\n// // axiosInstance.interceptors.request.use(\n// //   (config) => {\n// //     const token = JSON.parse(localStorage.getItem(\"login\"));\n// //     if (token) {\n// //       config.headers.Authorization = `Bearer ${token.token}`;\n// //     }\n// //     return config;\n// //   },\n// //   (error) => {\n// //     return Promise.reject(error);\n// //   }\n// // );\n\n// // Add response interceptor for handling token expiration\n\n// api.interceptors.response.use(\n//   (response) => {\n//     console.log(\"RES\", response);\n//     return response;\n//   },\n//   async (error) => {\n//     if (error.response && error.response.status === 419) {\n//       console.log(\"Token expired, refreshing...\");\n//       try {\n//         const refreshToken = sessionStorage.getItem(\"refreshToken\");\n//         if (!refreshToken) {\n//           console.log(\"No refresh token provided.\");\n//           throw new Error(\"No refresh token provided.\");\n//         } else {\n//           console.log(\"refresh token provided.\", refreshToken);\n//         }\n//         const refreshData = await axios.get(\n//           `http://localhost:8081/api/refreshToken`,\n//           {\n//             headers: {\n//               requestToken: refreshToken,\n//             },\n//           }\n//         );\n//         const newToken = refreshData.data.token;\n//         console.log(\"NewToken\",newToken);\n//         localStorage.setItem(\n//           \"login\",\n//           JSON.stringify({\n//             token: newToken,\n//           })\n//         );\n// console.log(\"hereeee\");\n//         sessionStorage.setItem(\"refreshToken\", newToken);\n\n//         // Retry the original request with the new access token\n//         const originalRequest = error.config;\n//         originalRequest.headers.Authorization = `Bearer ${newToken}`;\n//         return api(originalRequest);\n//       } catch (refreshError) {\n//         console.error(\"Error\", refreshError);\n\n//         return Promise.reject(error);\n//       }\n//     }\n//   }\n// );\n\n// export default api;\n\nimport axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:5001/\" // our API base URL\n});\n\n// Add a request interceptor to attach the access token to each request\napi.interceptors.request.use(config => {\n  const accessToken = JSON.parse(localStorage.getItem(\"login\")).accessToken;\n  if (accessToken) {\n    config.headers.Authorization = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle token refreshment and authentication\napi.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n\n  // if (error.response && error.response.status === 419 ){\n  //   console.log(\"this is 419 error\");\n  //   originalRequest._retry = true;\n  //   try {\n  //     const refreshToken = JSON.parse(localStorage.getItem(\"login\")).refreshToken;\n  //     const response = await axios.post(\"/refreshToken\", { refreshToken });\n  //     const newAccessToken = response.data.accessToken;\n  //     localStorage.setItem(\"accessToken\", newAccessToken);\n  //     originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n  //     return axios(originalRequest);\n  //   } catch (error) {\n  //     console.error(\"Token refresh failed:\", error);\n  //     // Redirect to login page if token refresh fails\n  //     // window.location.href = \"/login\";\n  //   }\n  // }\n  if (error.response && error.response.status === 419) {\n    // Handle 419 error by refreshing the token\n    try {\n      const refreshToken = JSON.parse(localStorage.getItem(\"login\")).refreshToken;\n      if (!refreshToken) {\n        throw new Error(\"No refresh token available\");\n      }\n      console.log(\"Inside token expiration handler, refreshing token...\");\n      const refreshResponse = await axios.get(`http://localhost:4000/api/users/refreshToken`, {\n        headers: {\n          \"refresh-token\": refreshToken\n        }\n      });\n      console.log(\"-----------------resrefresh\", refreshResponse);\n      const newtoken = refreshResponse.data.token;\n      console.log(\"hellloooo token\", newtoken);\n      localStorage.setItem(\"token\", newtoken);\n\n      // Retry the original request with the new access token\n      const originalRequest = error.config;\n      originalRequest.headers.Authorization = `Bearer ${newtoken}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      console.error(\"Error refreshing access token:\", refreshError);\n\n      // If the refresh token has expired, dispatch logout action\n\n      return Promise.reject(error);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","accessToken","JSON","parse","localStorage","getItem","headers","Authorization","error","Promise","reject","response","originalRequest","status","refreshToken","Error","console","log","refreshResponse","get","newtoken","data","token","setItem","refreshError"],"sources":["/home/shreya/Documents/jwt/blog-app/src/config.js"],"sourcesContent":["// import axios from \"axios\";\n\n// const api = axios.create({\n//   baseURL: \"http://localhost:8081/\", // our API base URL\n// });\n\n// // Request interceptor for adding the bearer token\n// api.interceptors.request.use(\n//   (config) => {\n//     const token = JSON.parse(localStorage.getItem(\"login\")).accessToken;\n//     if (token) {\n//       config.headers.Authorization = `Bearer ${token}`;\n//     }\n//     return config;\n//   },\n//   (error) => {\n//     return Promise.reject(error);\n//   }\n// );\n\n// // // API endpoints\n// // export const getUser = () => {\n// //   return api.get(\"/user\");\n// // };\n\n// // export const deleteUser = (userId) => {\n// //   return api.delete(`/user/${userId}`);\n// // };\n\n// // https://coderomeos.org/axios-interceptors-in-a-react-application\n\n// // // Create axios instance for specific base URL\n// // const axiosInstance = axios.create({\n// //   baseURL: \"http://localhost:8081/api/\",\n// // });\n\n// // // Add request interceptor for attaching token to requests\n// // axiosInstance.interceptors.request.use(\n// //   (config) => {\n// //     const token = JSON.parse(localStorage.getItem(\"login\"));\n// //     if (token) {\n// //       config.headers.Authorization = `Bearer ${token.token}`;\n// //     }\n// //     return config;\n// //   },\n// //   (error) => {\n// //     return Promise.reject(error);\n// //   }\n// // );\n\n// // Add response interceptor for handling token expiration\n\n// api.interceptors.response.use(\n//   (response) => {\n//     console.log(\"RES\", response);\n//     return response;\n//   },\n//   async (error) => {\n//     if (error.response && error.response.status === 419) {\n//       console.log(\"Token expired, refreshing...\");\n//       try {\n//         const refreshToken = sessionStorage.getItem(\"refreshToken\");\n//         if (!refreshToken) {\n//           console.log(\"No refresh token provided.\");\n//           throw new Error(\"No refresh token provided.\");\n//         } else {\n//           console.log(\"refresh token provided.\", refreshToken);\n//         }\n//         const refreshData = await axios.get(\n//           `http://localhost:8081/api/refreshToken`,\n//           {\n//             headers: {\n//               requestToken: refreshToken,\n//             },\n//           }\n//         );\n//         const newToken = refreshData.data.token;\n//         console.log(\"NewToken\",newToken);\n  //         localStorage.setItem(\n//           \"login\",\n//           JSON.stringify({\n//             token: newToken,\n//           })\n//         );\n// console.log(\"hereeee\");\n//         sessionStorage.setItem(\"refreshToken\", newToken);\n\n//         // Retry the original request with the new access token\n//         const originalRequest = error.config;\n//         originalRequest.headers.Authorization = `Bearer ${newToken}`;\n//         return api(originalRequest);\n//       } catch (refreshError) {\n//         console.error(\"Error\", refreshError);\n\n//         return Promise.reject(error);\n//       }\n//     }\n//   }\n// );\n\n// export default api;\n\n\nimport axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: \"http://localhost:5001/\", // our API base URL\n  });\n  \n\n// Add a request interceptor to attach the access token to each request\napi.interceptors.request.use(\n  (config) => {\n    const accessToken = JSON.parse(localStorage.getItem(\"login\")).accessToken;\n    if (accessToken) {\n      config.headers.Authorization = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle token refreshment and authentication\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  }, \n  async (error) => {\n    const originalRequest = error.config;\n\n    // if (error.response && error.response.status === 419 ){\n    //   console.log(\"this is 419 error\");\n    //   originalRequest._retry = true;\n    //   try {\n    //     const refreshToken = JSON.parse(localStorage.getItem(\"login\")).refreshToken;\n    //     const response = await axios.post(\"/refreshToken\", { refreshToken });\n    //     const newAccessToken = response.data.accessToken;\n    //     localStorage.setItem(\"accessToken\", newAccessToken);\n    //     originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n    //     return axios(originalRequest);\n    //   } catch (error) {\n    //     console.error(\"Token refresh failed:\", error);\n    //     // Redirect to login page if token refresh fails\n    //     // window.location.href = \"/login\";\n    //   }\n    // }\n    if (error.response && error.response.status === 419) {\n      // Handle 419 error by refreshing the token\n      try {\n        const refreshToken = JSON.parse(localStorage.getItem(\"login\")).refreshToken;\n        if (!refreshToken) {\n          throw new Error(\"No refresh token available\");\n        }\n\n        console.log(\"Inside token expiration handler, refreshing token...\");\n        const refreshResponse = await axios.get(\n          `http://localhost:4000/api/users/refreshToken`,\n          {\n            headers: {\n              \"refresh-token\": refreshToken,\n            },\n          }\n        );\n        console.log(\"-----------------resrefresh\", refreshResponse);\n\n        const newtoken = refreshResponse.data.token;\n        console.log(\"hellloooo token\", newtoken);\n        localStorage.setItem(\"token\", newtoken);\n\n        // Retry the original request with the new access token\n        const originalRequest = error.config;\n        originalRequest.headers.Authorization = `Bearer ${newtoken}`;\n        return api(originalRequest);\n      } catch (refreshError) {\n        console.error(\"Error refreshing access token:\", refreshError);\n\n        // If the refresh token has expired, dispatch logout action\n       \n        \n        return Promise.reject(error);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\n\nexport default api;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,wBAAwB,CAAE;AACrC,CAAC,CAAC;;AAGJ;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAACJ,WAAW;EACzE,IAAIA,WAAW,EAAE;IACfD,MAAM,CAACM,OAAO,CAACC,aAAa,GAAI,UAASN,WAAY,EAAC;EACxD;EACA,OAAOD,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAd,GAAG,CAACG,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACD,MAAOH,KAAK,IAAK;EACf,MAAMI,eAAe,GAAGJ,KAAK,CAACR,MAAM;;EAEpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIQ,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;IACnD;IACA,IAAI;MACF,MAAMC,YAAY,GAAGZ,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAACS,YAAY;MAC3E,IAAI,CAACA,YAAY,EAAE;QACjB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MAEAC,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;MACnE,MAAMC,eAAe,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CACpC,8CAA6C,EAC9C;QACEb,OAAO,EAAE;UACP,eAAe,EAAEQ;QACnB;MACF,CACF,CAAC;MACDE,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEC,eAAe,CAAC;MAE3D,MAAME,QAAQ,GAAGF,eAAe,CAACG,IAAI,CAACC,KAAK;MAC3CN,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEG,QAAQ,CAAC;MACxChB,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAAC;;MAEvC;MACA,MAAMR,eAAe,GAAGJ,KAAK,CAACR,MAAM;MACpCY,eAAe,CAACN,OAAO,CAACC,aAAa,GAAI,UAASa,QAAS,EAAC;MAC5D,OAAO1B,GAAG,CAACkB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOY,YAAY,EAAE;MACrBR,OAAO,CAACR,KAAK,CAAC,gCAAgC,EAAEgB,YAAY,CAAC;;MAE7D;;MAGA,OAAOf,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;IAC9B;EACF;EAEA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAGD,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}