// const express = require("express");
// const { AccessToken } = require("../jwt/jwt");

// const router = express.Router();
// const user = require("../models/user");

// router.post("/signup", async (req, res) => {
//   try {
//     const existingUser = await user.findOne({ email: req.body.email });
//     if (existingUser) {
//       return res
//         .status(400)
//         .json({ error: "User already exists with this email" });
//     }
//     const newData = new user({
//       name: req.body.name,
//       email: req.body.email,
//       password: req.body.password,
//       role: req.body.role,
//     });
//     console.log("aaaaa", newData);

//     const saveData = await newData.save();
//     res.status(200).json(saveData); // Assuming 200 is the appropriate status code
//   } catch (error) {
//     console.error(error); // Log the error for debugging
//     res.status(500).json({ error: "Internal Server Error" }); // Sending a generic error response
//   }
// });

// router.post("/login", async (req, res) => {
//   try {
//     const existingUser = await user.findOne({
//       email: req.body.email,
//       password: req.body.password,
//     });
//     if (existingUser) {
//        const AToken =  await AccessToken(existingUser.id);
//       res.send({ existingUser,AToken });
//       // return res.status(200).json(existingUser);
//       return;
//     } else {
//       return res.status(404).json({ error: "User not found" });
//     }
//   } catch (error) {
//     console.error(error);
//     return res.status(500).json({ error: "Internal Server Error" });
//   }                  
// });



// router.get("/refreshToken" , async (req, res) => {
//   const { refreshToken: requestToken } = req.body;
//   if (requestToken == null) {
//       return res.status(419).send("Refresh Token is required!");
//   }

//   try {
//     const refreshToken = JSON.parse(localStorage.getItem("login")).refreshToken;
//       if (!refreshToken) {
//           res.status(419).send("Invalid refresh token");
//           return;
//       }
//       if (verifyExpiration(refreshToken)) {
//          localStorage.removeItem(refreshToken.refreshToken);
//           res.status(419).send("Refresh token was expired.");
//           return;
//       }

//       const user = await user.findOne({ 
//           where: {id: refreshToken.user},
//           attributes: {
//               exclude: ['password']
//           }
//       });
  
//       let newAccessToken = jwt.sign(  {id: user}, "jwtSecretKeys", {
//         expiresIn: "1h",
//       });
 
//       return res.status(200).json({
//           accessToken: newAccessToken,
//           refreshToken: refreshToken.token,
//       });
//   } catch (err) {
//       console.log('err', err);
//       return res.status(500).send('Internal server error');
//   }
// });



// module.exports = router;


// Express Router
const express = require("express");
const jwt = require("jsonwebtoken");
const { AccessToken, RefreshToken }  = require("../jwt/jwt");
const router = express.Router();
const user = require("../models/user");

// Signup route
router.post("/signup", async (req, res) => {
  try {
    const existingUser = await user.findOne({ email: req.body.email });
    if (existingUser) {
      return res.status(400).json({ error: "User already exists with this email" });
    }
    const newData = new user({
      name: req.body.name,
      email: req.body.email,
      password: req.body.password,
      role: req.body.role,
    });
    const saveData = await newData.save();
    res.status(200).json(saveData);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

// Login route
router.post("/login", async (req, res) => {
  try {
    const existingUser = await user.findOne({
      email: req.body.email,
      password: req.body.password,
    });
    if (existingUser) {
      const { accessToken, refreshToken } = await AccessToken(existingUser.id);
      res.send({ existingUser, accessToken, refreshToken });
      return;
    } else {
      return res.status(404).json({ error: "User not found" });
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
});

// Refresh token route
router.get("/refreshToken", async (req, res) => {
  const refreshToken = req.headers["refresh-token"]; 
  if (!refreshToken) {
    return res.status(419).send("Refresh Token is required!");
  }

  try {
    jwt.verify(refreshToken, "jwtSecretKeys", async (err, decoded) => {
      if (err) {
        return res.status(419).send("Invalid refresh token");
      }

      // Assuming `AccessToken` function generates new tokens
      const { accessToken, refreshToken: newRefreshToken } = await AccessToken(decoded.id);

      return res.status(200).json({ accessToken, refreshToken: newRefreshToken });
    });
  } catch (err) {
    console.error('Error', err);
    return res.status(500).send('Internal server error');
  }
});

// router.get("/refreshToken", async (req, res) => {
//   const refreshToken = req.headers["refresh-token"]; 
//   if (!refreshToken) {
//     return res.status(419).send("Refresh Token is required!");
//   }

//   try {
//     jwt.verify(refreshToken, process.env.JWT_SECRET, async (err, decoded) => {
//       if (err) {
//         return res.status(419).send("Invalid refresh token");
//       }

//       // Generate new access token
//       const accessToken = AccessToken(decoded.id);

//       // Generate new refresh token
//       const newRefreshToken = RefreshToken(decoded.id);

//       return res.status(200).json({ accessToken, refreshToken: newRefreshToken });
//     });
//   } catch (err) {
//     console.error('Error', err);
//     return res.status(500).send('Internal server error');
//   }
// });


 
module.exports = router;
